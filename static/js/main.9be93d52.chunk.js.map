{"version":3,"sources":["api/MainApi.tsx","components/home/HomePage.tsx","actions/index.tsx","history.tsx","components/dashboard/DashBoardMainPage.tsx","components/App.tsx","serviceWorker.ts","reducers/PostReducer.tsx","reducers/index.tsx","index.tsx"],"names":["axios","create","baseURL","HomePage","this","props","getAllPost","postList","map","post","key","id","title","React","Component","connect","state","postReducer","dispatch","a","mainApi","get","response","type","payload","data","console","log","createBrowserHistory","DashBoardMainPage","App","history","path","exact","component","Boolean","window","location","hostname","match","INITIAL_STATE","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAU,yCCSRC,E,kLAEEC,KAAKC,MAAMC,e,+BAIX,OAAKF,KAAKC,MAAME,SAQTH,KAAKC,MAAME,SAASC,KAAI,SAACC,GAC5B,OACI,yBAAKC,IAAKD,EAAKE,IAAKF,EAAKG,UARzB,gD,GAROC,IAAMC,WA2BdC,eALS,SAACC,GACrB,MAAO,CACHT,SAAUS,EAAMC,YAAYV,YAGI,CAACD,WCrCf,yDAAM,WAAOY,GAAP,eAAAC,EAAA,+EAEDC,EAAQC,IAAI,UAFX,OAElBC,EAFkB,OAGxBJ,EAAS,CAACK,KAAM,WAAYC,QAASF,EAASG,OAHtB,gDAKxBC,QAAQC,IAAR,MALwB,yDAAN,wDDqCXZ,CAAuCZ,G,OEtCvCyB,gBCSAC,E,uKANP,OACI,yD,GAHoBf,aCejBgB,EAXW,WACxB,OACI,kBAAC,IAAD,CAAQC,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAY/B,IAClC,kBAAC,IAAD,CAAO6B,KAAK,aAAaC,OAAK,EAACC,UAAYL,OCCjCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAgB,CAClBjC,SAAU,MCECkC,cAAgB,CAC3BxB,YDAW,WAAyC,IAAxCD,EAAuC,uDAA/BwB,EAAeE,EAAgB,uCACnD,OAAQA,EAAOnB,MACX,IAAK,WACD,OAAO,eAAIP,EAAX,CAAkBT,SAAUmC,EAAOlB,UAEvC,QACI,OAAOR,MEKb2B,EAAmBP,OAAOQ,sCAAwCC,IAElEC,EAAQC,YACVC,EACAL,EAAiBM,YAAgBC,OAGrCC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,cAAc,UHiHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.9be93d52.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL : 'https://jsonplaceholder.typicode.com'\n})","import React from \"react\";\nimport {connect} from 'react-redux'\nimport {getAllPost} from '../../actions'\n\n\ninterface PostList {\n    userId: number;\n    id: number;\n    title: string;\n    body: string;\n}\n\nclass HomePage extends React.Component<any, any> {\n    componentDidMount(): void {\n        this.props.getAllPost()\n    }\n\n    render() {\n        if (!this.props.postList) {\n            return (\n                <div>\n                    Loading ...\n                </div>\n            )\n        }\n\n        return this.props.postList.map((post: PostList) => {\n            return (\n                <div key={post.id}>{post.title}</div>\n            )\n        })\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        postList: state.postReducer.postList\n    }\n}\nexport default connect(mapStateToProps, {getAllPost})(HomePage)","import mainApi from '../api/MainApi'\n\nexport const getAllPost = () => async (dispatch: any) => {\n    try {\n        const response = await mainApi.get('/posts');\n        dispatch({type: \"ALL_POST\", payload: response.data});\n    } catch (error) {\n        console.log(error);\n    }\n}","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, {Component} from \"react\";\n\nclass DashBoardMainPage extends Component<any, any>{\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        return (\n            <p>This is from Dashboard</p>\n        )\n    }\n\n}\nexport default DashBoardMainPage","import React from 'react';\nimport {Router, Route, Switch} from 'react-router-dom'\nimport HomePage from './home/HomePage'\nimport history from \"../history\";\nimport DashBoardMainPage from \"./dashboard/DashBoardMainPage\";\n\nconst App: React.FC<{}> = ()=>{\n  return(\n      <Router history={history}>\n        <Switch>\n          <Route path='/' exact component ={HomePage}  />\n          <Route path='/dashboard' exact component ={DashBoardMainPage}  />\n        </Switch>\n      </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\n    postList: null\n}\n\nexport default (state = INITIAL_STATE, action: any) => {\n    switch (action.type) {\n        case 'ALL_POST':\n            return {...state, postList: action.payload};\n\n        default:\n            return state;\n    }\n\n}","import {combineReducers} from 'redux';\nimport postReducers from './PostReducer';\n\nexport default combineReducers({\n    postReducer: postReducers\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers'\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose ;\n\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider> ,\n    document.querySelector('#root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}